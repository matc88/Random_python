import pandas as pd
from datetime import datetime

# Sample data
data = {
    'Column 1': ['DA', 'EW', 'DA', 'EW', 'DA', 'EW', 'DA', 'EW', 'DA', 'EW'],
    'Column 3': ['C3_1', 'C3_2', 'C3_3', 'C3_4', 'C3_5', 'C3_6', 'C3_7', 'C3_8', 'C3_9', 'C3_10'],
    'Column 4': ['AAS9425', 'AAS9425', 'OTHER', 'AAS9425', 'AAS9425', 'OTHER', 'AAS9425', 'AAS9425', 'OTHER', 'AAS9425'],
    'Column 5': ['C5_1', 'C5_2', 'C5_3', 'C5_4', 'C5_5', 'C5_6', 'C5_7', 'C5_8', 'C5_9', 'C5_10'],
    'Column 9': ['C9_1', 'C9_1', 'C9_2', 'C9_2', 'C9_3', 'C9_3', 'C9_4', 'C9_4', 'C9_5', 'C9_5'],
    'AMOUNT': [100, 80, 50, 60, 40, 30, 70, 50, 20, 10],
    'date': [
        datetime(2024, 7, 1), datetime(2024, 7, 2),
        datetime(2024, 7, 5), datetime(2024, 7, 6),
        datetime(2024, 7, 8), datetime(2024, 7, 8),
        datetime(2024, 7, 10), datetime(2024, 7, 13),
        datetime(2024, 7, 15), datetime(2024, 7, 15)
    ]
}

# Create DataFrame
df = pd.DataFrame(data)

# Display DataFrame
print(df)

# Ensure 'date' column is in datetime format
df['date'] = pd.to_datetime(df['date'])

# Add a new column 'Edits' initialized to 'N'
df['Edits'] = 'N'

# Identifying duplicates based on Column 9
duplicates = df[df.duplicated(subset='Column 9', keep=False)]

# Iterate through the duplicates to perform the replacement
for value in duplicates['Column 9'].unique():
    duplicate_rows = df[df['Column 9'] == value]
    
    if len(duplicate_rows) == 2:
        row_da = duplicate_rows[duplicate_rows['Column 1'] == 'DA']
        row_ew = duplicate_rows[duplicate_rows['Column 1'] == 'EW']
        
        if len(row_da) == 1 and len(row_ew) == 1:
            index_da = row_da.index[0]
            index_ew = row_ew.index[0]
            
            # Add date condition
            date_da = df.loc[index_da, 'date']
            date_ew = df.loc[index_ew, 'date']
            
            if (df.loc[index_ew, 'Column 4'] == 'AAS9425') and \
               (df.loc[index_da, 'AMOUNT'] - df.loc[index_ew, 'AMOUNT'] >= 18) and \
               (abs((date_da - date_ew).days) <= 3):
                df.loc[index_ew, ['Column 3', 'Column 4', 'Column 5']] = df.loc[index_da, ['Column 3', 'Column 4', 'Column 5']]
                df.loc[index_da, 'Edits'] = 'Y - Remove'
                df.loc[index_ew, 'Edits'] = 'Y - Changed'

# Display the updated dataframe
print(df)

# Optionally, you can save the updated dataframe to a new Excel file
output_file_path = r'updated_data.xlsx'
df.to_excel(output_file_path, index=False)
print(f"Updated data saved to {output_file_path}")
